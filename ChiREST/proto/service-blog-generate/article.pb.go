// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: article.proto

/*
	Package blog is a generated protocol buffer package.

	It is generated from these files:
		article.proto

	It has these top-level messages:
		EmptyRequest
		Article
		GetAllArticleResponse
*/
package blog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EmptyRequest struct {
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptorArticle, []int{0} }

type Article struct {
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	UserId int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id"`
	Title  string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	Slug   string `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug"`
}

func (m *Article) Reset()                    { *m = Article{} }
func (*Article) ProtoMessage()               {}
func (*Article) Descriptor() ([]byte, []int) { return fileDescriptorArticle, []int{1} }

func (m *Article) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Article) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Article) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Article) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

type GetAllArticleResponse struct {
	Articles []*Article `protobuf:"bytes,1,rep,name=articles" json:"articles"`
}

func (m *GetAllArticleResponse) Reset()                    { *m = GetAllArticleResponse{} }
func (*GetAllArticleResponse) ProtoMessage()               {}
func (*GetAllArticleResponse) Descriptor() ([]byte, []int) { return fileDescriptorArticle, []int{2} }

func (m *GetAllArticleResponse) GetArticles() []*Article {
	if m != nil {
		return m.Articles
	}
	return nil
}

func init() {
	proto.RegisterType((*EmptyRequest)(nil), "blog.EmptyRequest")
	proto.RegisterType((*Article)(nil), "blog.Article")
	proto.RegisterType((*GetAllArticleResponse)(nil), "blog.GetAllArticleResponse")
}
func (this *EmptyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EmptyRequest)
	if !ok {
		that2, ok := that.(EmptyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Article) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Article)
	if !ok {
		that2, ok := that.(Article)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Slug != that1.Slug {
		return false
	}
	return true
}
func (this *GetAllArticleResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAllArticleResponse)
	if !ok {
		that2, ok := that.(GetAllArticleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Articles) != len(that1.Articles) {
		return false
	}
	for i := range this.Articles {
		if !this.Articles[i].Equal(that1.Articles[i]) {
			return false
		}
	}
	return true
}
func (this *EmptyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&blog.EmptyRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Article) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&blog.Article{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Slug: "+fmt.Sprintf("%#v", this.Slug)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAllArticleResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.GetAllArticleResponse{")
	if this.Articles != nil {
		s = append(s, "Articles: "+fmt.Sprintf("%#v", this.Articles)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringArticle(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *EmptyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Article) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Article) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintArticle(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintArticle(dAtA, i, uint64(m.UserId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintArticle(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Slug) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintArticle(dAtA, i, uint64(len(m.Slug)))
		i += copy(dAtA[i:], m.Slug)
	}
	return i, nil
}

func (m *GetAllArticleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllArticleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Articles) > 0 {
		for _, msg := range m.Articles {
			dAtA[i] = 0xa
			i++
			i = encodeVarintArticle(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintArticle(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EmptyRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Article) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovArticle(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovArticle(uint64(m.UserId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovArticle(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovArticle(uint64(l))
	}
	return n
}

func (m *GetAllArticleResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Articles) > 0 {
		for _, e := range m.Articles {
			l = e.Size()
			n += 1 + l + sovArticle(uint64(l))
		}
	}
	return n
}

func sovArticle(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozArticle(x uint64) (n int) {
	return sovArticle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EmptyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmptyRequest{`,
		`}`,
	}, "")
	return s
}
func (this *Article) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Article{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Slug:` + fmt.Sprintf("%v", this.Slug) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAllArticleResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAllArticleResponse{`,
		`Articles:` + strings.Replace(fmt.Sprintf("%v", this.Articles), "Article", "Article", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringArticle(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EmptyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArticle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Article) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Article: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Article: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArticle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllArticleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllArticleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllArticleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Articles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Articles = append(m.Articles, &Article{})
			if err := m.Articles[len(m.Articles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArticle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArticle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthArticle
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowArticle
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipArticle(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthArticle = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArticle   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("article.proto", fileDescriptorArticle) }

var fileDescriptorArticle = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0xcd, 0xa5, 0xa5, 0x1f, 0x6e, 0xcb, 0x60, 0x09, 0x14, 0x15, 0xe4, 0x54, 0x15, 0x43, 0x07,
	0x48, 0xa5, 0x32, 0xb0, 0xd2, 0x48, 0x08, 0xd8, 0x90, 0xff, 0x00, 0x22, 0x8d, 0x09, 0x96, 0x52,
	0x5c, 0x6a, 0x67, 0x60, 0x63, 0x62, 0xe6, 0x67, 0xf0, 0x53, 0x18, 0x3b, 0x32, 0x45, 0xd4, 0x2c,
	0x28, 0x53, 0x7f, 0x02, 0xaa, 0x1d, 0x2a, 0x90, 0x58, 0xec, 0xf7, 0xde, 0xdd, 0x3d, 0xdd, 0x3d,
	0xd4, 0xb9, 0x99, 0x2b, 0x3e, 0x49, 0x59, 0x30, 0x9b, 0x0b, 0x25, 0x70, 0x35, 0x4a, 0x45, 0xd2,
	0x3d, 0x4a, 0xb8, 0xba, 0xcb, 0xa2, 0x60, 0x22, 0xa6, 0xc3, 0x44, 0x24, 0x62, 0x68, 0x8a, 0x51,
	0x76, 0x6b, 0x98, 0x21, 0x06, 0xd9, 0xa1, 0xfe, 0x36, 0x6a, 0x9f, 0x4d, 0x67, 0xea, 0x91, 0xb2,
	0x87, 0x8c, 0x49, 0xd5, 0x7f, 0x06, 0x54, 0x1f, 0x5b, 0x5b, 0xbc, 0x8b, 0x5c, 0x1e, 0x7b, 0xd0,
	0x83, 0x41, 0x33, 0xac, 0x15, 0xb9, 0xef, 0xf2, 0x98, 0xba, 0x3c, 0xc6, 0x07, 0xa8, 0x9e, 0x49,
	0x36, 0xbf, 0xe6, 0xb1, 0xe7, 0xf6, 0x60, 0x50, 0x09, 0x5b, 0x45, 0xee, 0xff, 0x48, 0xb4, 0xb6,
	0x06, 0x97, 0x31, 0xf6, 0xd1, 0x96, 0xe2, 0x2a, 0x65, 0x5e, 0xc5, 0x18, 0x34, 0x8b, 0xdc, 0xb7,
	0x02, 0xb5, 0x1f, 0xde, 0x47, 0x55, 0x99, 0x66, 0x89, 0x57, 0x35, 0xf5, 0x46, 0x91, 0xfb, 0x86,
	0x53, 0xf3, 0xf6, 0xaf, 0xd0, 0xce, 0x39, 0x53, 0xe3, 0x34, 0x2d, 0xb7, 0xa1, 0x4c, 0xce, 0xc4,
	0xbd, 0x64, 0xf8, 0x04, 0x35, 0xca, 0xbb, 0xa5, 0x07, 0xbd, 0xca, 0xa0, 0x35, 0xea, 0x04, 0xeb,
	0xcb, 0x83, 0xb2, 0x31, 0x6c, 0x17, 0xb9, 0xbf, 0x69, 0xa1, 0x1b, 0x34, 0xba, 0x40, 0x26, 0x21,
	0x7c, 0x8a, 0x3a, 0x7f, 0x9c, 0x31, 0xb6, 0xf3, 0xbf, 0x73, 0xe8, 0xee, 0x59, 0xed, 0xdf, 0x15,
	0xc2, 0xc3, 0xc5, 0x92, 0x38, 0xef, 0x4b, 0xe2, 0xac, 0x96, 0x04, 0x9e, 0x34, 0x81, 0x57, 0x4d,
	0xe0, 0x4d, 0x13, 0x58, 0x68, 0x02, 0x1f, 0x9a, 0xc0, 0x97, 0x26, 0xce, 0x4a, 0x13, 0x78, 0xf9,
	0x24, 0x4e, 0x54, 0x33, 0x49, 0x1f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x72, 0x3b, 0x4c, 0xe7,
	0xaf, 0x01, 0x00, 0x00,
}
